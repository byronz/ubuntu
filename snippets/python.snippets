snippet #!
	#!/usr/bin/python

snippet imp
	import ${1:module}

snippet impas 
	import ${1:module} as ${2:abbr}

snippet from 
	from ${1:module} import ${2:func}

snippet sep
	os.path.sep.join((${1:item1},))
# Module Docstring
snippet doc
	'''${1:doc}'''
	${2:statement}
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
	${4:statement}
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for normal for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}

snippet for List Comprehension
	[${3:any}$1 for ${1:item} in ${2:list}]

# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self):
			${4:pass}

snippet cls
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet med Class Method (no argument)
	def ${1:medname}(self):
		${2:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet med Class Method (with arguments)
	def ${1:mname}(self, ${2:arg}):
		"""${3:docstring for $1}"""
		${4:pass}
# New Property
snippet @
	@property
	def ${1:name}(self):
		return ${2:value}
# Lambda
snippet lam
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}

# if __name__ == '__main__':
snippet main
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
